import { AnyMessageContent, Browsers, ConnectionState, DisconnectReason, makeWASocket, MessageUpsertType, useMultiFileAuthState, WAMessage } from "baileys";
import { Boom } from '@hapi/boom';
import { join } from "path";
import fs from 'fs';
import { AppDataSource } from "../configs/db";
import { Imcenter } from "../entities/imcenter";
import QRCode from "qrcode";
import { ImcenterLogs } from "../entities/imcenterLogs";
import { EventEmitter } from "stream";
import { timeToDate } from "../utils/date";
import { WhatsappSession } from "../entities/whatsappSession";

export class WhatsappService {
    private sessionId: string;
    private socket: ReturnType<typeof makeWASocket>;
    private basePath: string;
    private path: string;

    private imcenterRepository = AppDataSource.getRepository(Imcenter);
    private imcenterLogRepository = AppDataSource.getRepository(ImcenterLogs);
    private whatsappSessionRepository = AppDataSource.getRepository(WhatsappSession);

    constructor(sessionId: string, basePath: string = "sessions") {
        this.sessionId = sessionId;
        this.basePath = basePath;
        this.path = join(this.basePath, this.sessionId);
    }

    public async connect() {
        // Tentukan folder untuk setiap instance
        const sessionPath = join(this.basePath, this.sessionId);

        // Gunakan useMultiFileAuthState untuk membuat state autentikasi per instance
        const { state, saveCreds } = await useMultiFileAuthState(sessionPath);

        this.socket = makeWASocket({
            auth: state,
            printQRInTerminal: true,   
            syncFullHistory: false,
            /** Default timeout for queries, undefined for no timeout */
            defaultQueryTimeoutMs: undefined,
        });
        this.socket.ev.on('connection.update', (update) => {
            this.handleConnectionUpdate(this.path, update);
        })
        this.handleReceiveMessage();
        this.socket.ev.on('creds.update', () => {
            saveCreds();
        });
    }

    public async disconnect() {
        if (this.socket) {
            await this.socket.logout();
            this.socket = null;
        }
    }

    private async handleReceiveMessage() {
        this.socket.ev.on('messages.upsert', (messageInfoUpsert) => {
            console.log(messageInfoUpsert);
            this.SaveMessages(messageInfoUpsert);
        });
    }

    private async handleConnectionUpdate(path: string, update: Partial<ConnectionState>) {
        const { connection, qr, lastDisconnect } = update;
        if (connection === 'close') {
            const error = (lastDisconnect?.error as Boom)?.output?.statusCode;

            if (error === DisconnectReason.loggedOut) {
                console.log(`Session  logged out. Clearing data.`);
                fs.rmSync(path, { recursive: true });
                this.imcenterRepository.update({ nomorhp: this.sessionId }, { qrcode: null, standby: false, aktif : false });
                this.whatsappSessionRepository.delete({ nomorhp: this.sessionId });
            } else if (DisconnectReason.connectionLost) {
                console.log(`Session  connection lost. Reconnecting...`);
                this.imcenterRepository.update({ nomorhp: this.sessionId }, { standby: false, aktif : false });
                this.whatsappSessionRepository.delete({ nomorhp: this.sessionId });
                this.connect();
            } else if (error === DisconnectReason.restartRequired) {
                console.log(`Session  restart required. Reconnecting...`);
                this.imcenterRepository.update({ nomorhp: this.sessionId }, { standby: false, aktif : false });
                this.whatsappSessionRepository.delete({ nomorhp: this.sessionId });
                this.connect();
            }
            else {
                console.log(`Session  connection closed due to error ${error}. Reconnecting...`);
                this.imcenterRepository.update({ nomorhp: this.sessionId }, { standby: false, aktif : false });
                this.whatsappSessionRepository.delete({ nomorhp: this.sessionId });
                this.connect();
            }
        }

        if (connection === 'open') {
            this.saveQRCode(null);
            this.imcenterRepository.update({ nomorhp: this.sessionId }, { standby: true, aktif : true });
            const getSession = await this.whatsappSessionRepository.findOneBy({ nomorhp: this.sessionId });
            if (!getSession) {
                this.whatsappSessionRepository.save({ nomorhp: this.sessionId, sessionCred : this.socket.authState.creds, sessionKey : this.socket.authState.keys });
            }
            
            console.log(`Session  connected.`);
        }

    if (qr) {
            console.log(`Generated QR for session :`, qr);
            this.saveQRCode(qr);
        }
    }

    private async saveQRCode(qr: string) {
        var imcenter = await this.imcenterRepository.findOneBy({ nomorhp: this.sessionId });
        if (imcenter) {
            if (qr) imcenter.qrcode = await QRCode.toDataURL(qr);
            await this.imcenterRepository.save(imcenter);
        }
    }

    async getQRCode() : Promise<string> {
        var imcenter = await this.imcenterRepository.findOneBy({ nomorhp: this.sessionId });
        return imcenter.qrcode;
    }

    private async SaveMessages(m: { messages: WAMessage[], type : MessageUpsertType }) {
        console.log(JSON.stringify(m.messages));
        // get message latest than data on imcenter_log
        const imcenter = await this.imcenterRepository.findOneBy({ nomorhp: this.sessionId });
        const latestImcenterLog = await this.imcenterLogRepository.query(`SELECT * FROM imcenter_logs WHERE imcenter_id = ${imcenter.id} ORDER BY id DESC LIMIT 1`);
        if (latestImcenterLog.length > 0) {
            const lastMessageId : Date = latestImcenterLog[0].tgl_entry;
            const messages = m.messages.filter((message) => {
                const date = timeToDate(Number(message.messageTimestamp));
                if(date > lastMessageId) return message;
            }); 
            for (const message of messages) {
                if(message.key.fromMe || !message.key.remoteJid?.endsWith("@s.whatsapp.net")) continue;
                // this.sendMessage(message.key.remoteJid, "Pesan telah diterima");
                const imcenterLog = new ImcenterLogs();
                imcenterLog.imcenter_id = imcenter.id;
                imcenterLog.message_id = message.key.id;
                imcenterLog.type = "inbox";
                imcenterLog.keterangan = message.message?.conversation;
                imcenterLog.pengirim = message.key.remoteJid;
                imcenterLog.tgl_entry = timeToDate(Number(message.messageTimestamp));
                imcenterLog.status = "Diterima"
                imcenterLog.raw_message = JSON.stringify({key :message.key, message : message.message});
                await this.imcenterLogRepository.save(imcenterLog);
            }
        } else {
            for (const message of m.messages) {
                if(message.key.fromMe || message.key.remoteJid?.endsWith("@s.whatsapp.net")) continue;
                // this.sendMessage(message.key.remoteJid, "Pesan telah diterima");
                const imcenterLog = new ImcenterLogs();
                imcenterLog.imcenter_id = imcenter.id;
                imcenterLog.message_id = message.key.id;
                imcenterLog.type = "inbox";
                imcenterLog.keterangan = message.message?.conversation;
                imcenterLog.pengirim = message.key.remoteJid;
                imcenterLog.tgl_entry = timeToDate(Number(message.messageTimestamp));
                imcenterLog.status = "Diterima"
                imcenterLog.raw_message = JSON.stringify({key :message.key, message : message.message});
                await this.imcenterLogRepository.save(imcenterLog);
            }
        }
    }

    /**
    * Kirim pesan ke nomor tertentu
    */
    public async sendMessage(jid: string, text: string) {
        if (!this.socket) throw new Error("Socket belum terhubung!");

        jid = jid.includes('@') ? jid : `${ jid }@s.whatsapp.net`;
        var response = await this.socket.sendMessage(jid, { text: text });
        console.log(`[${this.sessionId}] Pesan terkirim ke ${jid}`);
    }

    public async broadcastMessage(jids: string[], messageContent: AnyMessageContent) {
        for (const jid of jids) {
            try {
                var jid_ = jid.includes('@') ? jid : `${ jid }@s.whatsapp.net`;
                await this.socket.sendMessage(jid_, messageContent);
                console.log(`Pesan terkirim ke ${jid}`);
            } catch (error) {
                console.error(`Gagal mengirim pesan ke ${jid}:`, error);
            }
    
            // Tambahkan jeda untuk menghindari pemblokiran akun
            await new Promise((resolve) => setTimeout(resolve, 1000)); // Jeda 1 detik
        }
    };

    /**
    * Logout dan hapus sesi
    */
    public async logout() {
        if (this.socket) {
            await this.socket.logout();
            this.imcenterRepository.update({ nomorhp: this.sessionId }, { qrcode: null, standby: false, aktif : false });
            console.log(`[${this.sessionId}] Logout berhasil.`);
        }
    }

    async updateModeStandby(standby: boolean) {
        const imcenter = await this.imcenterRepository.findOneBy({ nomorhp: this.sessionId });
        if (imcenter) {
            imcenter.standby = standby;
            await this.imcenterRepository.save(imcenter);
        }
    }

}